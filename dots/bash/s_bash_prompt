#!/usr/bin/env bash

__prompt_errorcode() {
	if [ "${?}" == "0" ]; then
		return
	else
		echo -e "${1}[Exit Status: ${?}]\n${2}"
	fi
}


__prompt_git() {
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+'
			fi

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!'
			fi

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?'
			fi

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$'
			fi

		fi

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')"

		[ -n "${s}" ] && s=" ${s}"
		echo -e " ${1}[${branchName}${s}]${2}"
	else
		return
	fi
}


__prompt_parse() {
	case "$1" in
		nopath|hidepath)  PROMPT_PATH="nopath"    ;;
		basepath)         PROMPT_PATH="basepath"  ;;
		fullpath)         PROMPT_PATH="fullpath"  ;;
		path)
			if [[ "${PROMPT_PATH}" == "basepath" ]]; then
				PROMPT_PATH="fullpath"
			elif [[ "${PROMPT_PATH}" == "fullpath" ]]; then
				PROMPT_PATH="nopath"
			else
				PROMPT_PATH="basepath"
			fi
			;;
		showgit)  PROMPT_GIT=true   ;;
		hidegit)  PROMPT_GIT=false  ;;
		git)
			if [ "${PROMPT_GIT}" = true ]; then
				PROMPT_GIT=false
			else
				PROMPT_GIT=true
			fi
			;;
		reset)
			PROMPT_PATH="basepath"
			PROMPT_GIT=true
			;;
		*)
			echo "usage: prompt nopath|basepath|fullpath|path|showgit|hidegit|git|reset"
			echo "  nopath        don't show path"
			echo "  basepath      show base path"
			echo "  fullpath      show full path"
			echo "  path          toggle between nopath/basepath/fullpath"
			echo "  showgit       show git info"
			echo "  hidegit       don't show git info"
			echo "  git           toggle between showgit/hidegit"
			echo "  reset         reset to default (basepath/showgit)"
			;;
	esac
}


prompt() {
	__prompt_parse "$1"
	[ -n "$2" ] && __prompt_parse "$2"

	PS1="\$(__prompt_errorcode \"\[${bashc_red}\]\" \"\[${bashc_reset}\]\")"
	if [[ "${USER}" == "root" ]]; then
		PS1+="\[${bashc_orange}\]\u\[${bashc_blue}\]"
	else
		PS1+="\[${bashc_blue}\]\u"
	fi
	if [[ "${SSH_TTY}" ]]; then
		PS1+="@\[${bashc_orange}\]\h\[${bashc_blue}\]"
	fi;
	if [[ "${PROMPT_PATH}" == "basepath" ]]; then
		PS1+=":\W"
	elif [[ "${PROMPT_PATH}" == "fullpath" ]]; then
		PS1+=":\w"
	fi
	if [[ "${PROMPT_GIT}" = true ]]; then
		PS1+="\$(__prompt_git \"\[${bashc_orange}\]\" \"\[${bashc_blue}\]\")"
	fi
	PS1+="\\\$\[${bashc_reset}\] "

	export PS1
}

complete -W "nopath basepath fullpath path showgit hidegit git reset" prompt

prompt reset
